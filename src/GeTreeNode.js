/*# > Object < #*/var GeTreeNode = Class.create(GeObject, {    /*# > Method < #*/    initialize: function($super, parent) {        $super();        this.set_parent(parent);        this.childs = new Array();        this._init(parent);        Log.w("[" + this.id + "] Creating node tree: " + this.type);    },    /*# > Method < #*/    _init: function(parent) {        this.type = "basic";        this.bPhysUpdate = false;        this.bRedraw = false;    },    /*# > Method < #*/    set_parent: function(parent) {        this.parent = parent;    },    /*# > Method < #*/    set_physUpdate: function(bool) {        this.bPhysUpdate = bool;    },    /*# > Method < #*/    set_redraw: function(bool) {        this.bRedraw = bool;    },    /*# > Method < #*/    hide: function() {        this.set_redraw(false);        this.childs.each(function(item) {            item.hide();        });    },    /*# > Method < #*/    unhide: function() {        this.set_redraw(true);        this.childs.each(function(item) {            item.unhide();        });    },    /*# > Method < #*/    hidden: function() {        return !this.bRedraw;    },    /*# > Method < #*/    freeze: function() {        this.set_physUpdate(false);        this.childs.each(function(item) {            item.freeze();        });    },    /*# > Method < #*/    unfreeze: function() {        this.set_physUpdate(true);        this.childs.each(function(item) {            item.unfreeze();        });    },    /*# > Method < #*/    frozen: function() {        return !this.bPhysUpdate;    },    /*# > Method < #*/    get_parent: function() {        return this.parent;    },    /*# > Method < #*/    get_childs: function() {        return this.childs;    },    /*# > Method < #*/    add_child: function(node) {        this.childs.push(node);        node.parent = this;    },	enable_physics: function() {		if (!this.phys) {			this.phys = new GePhysState(this);		}	},    /*# > Method < #*/    update: function(dt) {		//Log.w("Update " + this.core_id);        if (this.phys && !this.frozen()) {            this.phys.update(dt);            var c = this.collide();            if (c) {  c.correct(); 					  c.response(); }        }		//ShoGE.Grid.replace(this);		if (this.postupdate) { this.postupdate(dt) };        this.childs.each(function(item) {            if (item.phys && !item.frozen()) {                item.phys.update(dt);                var c = item.collide();                if (c) {  c.correct();						  c.response(); }            }			if (item.postupdate) {				item.postupdate(dt);			}        });		    },	//postupdate: function(dt) {		//; // STUB	//},    /*# > Method < #*/    collide: function() {        if (this.frozen()) {            return null;        }        if (!this.bound) {           // Log.w("No bound for object " + this.id);			return null;        }        if (this.bound.shadow) {            this.bound.shadow.collide(ShoGE.Core.SG);        }        if (this.bound.circle) {            var c = this.bound.circle.collide(ShoGE.Core.SG);			//if (c) Log.w("Collide");			return c;		}		return null;    },    /*# > Method < #*/    draw: function(ctx) {        ctx.save();        if (this.gx && !this.hidden()) {			ctx.save();            this.gx.draw(ctx);			ctx.restore();        }        this.childs.each(function(item) {            if (item.gx && !item.hidden()) {                ctx.save();				item.gx.draw(ctx);				ctx.restore();            }        });        ctx.restore();    }});